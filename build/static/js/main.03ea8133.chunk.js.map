{"version":3,"sources":["services/game-builder.service.ts","components/cell.component.tsx","components/board.component.tsx","components/game-mgmt.component.tsx","store/store.ts","components/game.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GameBuilder","height","width","mines","board","initBoard","insertMines","countMinesNeighbors","row","col","boardHeight","length","boardWidth","neighbors","push","emptyBoard","i","j","rowIndex","colIndex","isMine","isFlagged","isRevealed","minesArroundCount","randomHeight","Math","floor","random","randomWidth","getNeighbors","filter","neighbor","CellComponent","props","click","bind","cell","isSuperman","data-testid","icon","faFlag","faBomb","className","this","onClick","renderCell","event","stopPropagation","shiftKey","markFlag","cellClicked","React","Component","BoardComponent","state","buildBoard","minesLeft","flagsError","prevProps","setState","Alert","severity","onClose","renderBoard","map","key","onCellClicked","toggleFlag","isFlagError","newBoard","getFlaggedMines","displayBoard","alert","revealveAllEmptyNeighbors","revealvedBoad","arr","alreadyRevealved","curr","shift","result","forEach","GameMgmtComponent","handleChanges","submit","TextField","id","label","type","classes","formControl","onChange","value","FormControlLabel","control","Checkbox","checked","toggleSuperman","name","color","Button","variant","btn","disabled","checkFormValidity","newGame","target","withStyles","theme","createStyles","margin","spacing","minWidth","withTheme","boardInitialState","reducer","combineReducers","action","payload","supermanMode","store","createStore","GameComponent","buildNewGame","isSupermanMode","connect","dispatch","newMode","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.03ea8133.chunk.js","sourcesContent":["import { Cell } from '../interfaces/cell.interface';\r\n\r\nexport class GameBuilder {\r\n    static buildBoard(height:number, width:number, mines:number):Cell[][] {\r\n        let board:Cell[][] = GameBuilder.initBoard(height, width);\r\n        GameBuilder.insertMines(board, height, width, mines);\r\n        GameBuilder.countMinesNeighbors(board);\r\n        return board;\r\n    }\r\n\r\n    static getNeighbors(row:number, col:number, board:Cell[][]):Cell[] {\r\n        const boardHeight:number = board.length;\r\n        const boardWidth:number = board[0].length;\r\n        let neighbors:Cell[] = [];\r\n\r\n        if (row > 0) neighbors.push(board[row - 1][col]);\r\n        if (col < boardWidth - 1) neighbors.push(board[row][col + 1]);\r\n        if (row < boardHeight - 1) neighbors.push(board[row + 1][col]);\r\n        if (col > 0) neighbors.push(board[row][col - 1]);\r\n\r\n        if (row > 0 && col > 0) neighbors.push(board[row - 1][col - 1]);\r\n        if (row > 0 && col < boardWidth - 1) neighbors.push(board[row - 1][col + 1]);\r\n        if (row < boardHeight - 1 && col < boardWidth - 1) neighbors.push(board[row + 1][col + 1]);\r\n        if (row < boardHeight - 1 && col > 0) neighbors.push(board[row + 1][col - 1]);\r\n\r\n        return neighbors;\r\n    }\r\n\r\n    static initBoard(height:number, width:number):Cell[][] {\r\n        let emptyBoard:Cell[][] = [];\r\n\r\n        for (let i = 0; i < height; i++) {\r\n            emptyBoard.push([]);\r\n            for (let j = 0; j < width; j++) {\r\n                emptyBoard[i][j] = {\r\n                    rowIndex: i,\r\n                    colIndex: j,\r\n                    isMine: false,\r\n                    isFlagged: false,\r\n                    isRevealed: false,\r\n                    minesArroundCount: 0\r\n                }\r\n            }\r\n        }\r\n\r\n        return emptyBoard;\r\n    }\r\n\r\n    private static insertMines(emptyBoard:Cell[][], height:number, width:number, mines:number):void {\r\n        while(mines > 0) {\r\n            let randomHeight = Math.floor(Math.random() * height);\r\n            let randomWidth = Math.floor(Math.random() * width);\r\n            if(!emptyBoard[randomHeight][randomWidth].isMine) {\r\n                emptyBoard[randomHeight][randomWidth].isMine = true;\r\n                mines--;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static countMinesNeighbors(board:Cell[][]):void {\r\n        for (let i = 0; i < board.length; i++) {\r\n            for (let j = 0; j < board[0].length; j++) {\r\n                const cell:Cell = board[i][j];\r\n                if (!cell.isMine) {\r\n                    const neighbors:Cell[] = GameBuilder.getNeighbors(i, j, board);\r\n                    board[i][j].minesArroundCount = neighbors.filter((neighbor:Cell) => neighbor.isMine).length;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport { Cell } from '../interfaces/cell.interface';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBomb, faFlag } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\ninterface CellComponentInputs {\r\n    cell:Cell;\r\n    isSuperman:boolean;\r\n    cellClicked: () => void;\r\n    markFlag: () => void;\r\n}\r\n\r\nexport class CellComponent extends React.Component<CellComponentInputs> {\r\n    constructor(props:CellComponentInputs) {\r\n        super(props);\r\n\r\n        this.click = this.click.bind(this);\r\n    }\r\n\r\n    renderCell(cell:Cell, isSuperman:boolean) {\r\n      if (isSuperman) {\r\n          if (cell.isFlagged) {\r\n            return <FontAwesomeIcon data-testid=\"flag\" icon={faFlag} />\r\n          }\r\n      } else {\r\n          if (cell.isFlagged) {\r\n            return <FontAwesomeIcon data-testid=\"flag\" icon={faFlag} />;\r\n          }\r\n          if (!cell.isRevealed) {\r\n            return null;\r\n          }\r\n      }\r\n      \r\n      if (cell.isMine) {\r\n        return (<FontAwesomeIcon data-testid=\"mine\" icon={faBomb} />);\r\n      }\r\n      if (cell.minesArroundCount === 0) {\r\n        return null;\r\n      }\r\n      return <span data-testid=\"minesarround-count\">{cell.minesArroundCount}</span>;\r\n    }\r\n\r\n    render() {\r\n        let className = \"cell\" + (this.props.cell.isRevealed ? \"\" : \" not-revealved\");\r\n        return (\r\n            <div className={className} onClick={this.click} data-testid=\"cell-container\">\r\n                { this.renderCell(this.props.cell, this.props.isSuperman)}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    click(event:any) {\r\n      event.stopPropagation();\r\n      if (event.shiftKey) {\r\n           this.props.markFlag();\r\n      } else {\r\n        this.props.cellClicked()\r\n      }\r\n    }\r\n}","import React, { ReactNode } from 'react';\r\nimport { Cell } from '../interfaces/cell.interface';\r\nimport { GameBuilder } from '../services/game-builder.service';\r\nimport { CellComponent } from './cell.component';\r\nimport { Board } from '../interfaces/board.interface';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\ninterface BoardComponentInputs {\r\n    board:Board;\r\n    isSuperman:boolean;\r\n}\r\n\r\ninterface BoardComponentState {\r\n    board:Cell[][];\r\n    minesLeft:number;\r\n    flagsError:boolean;\r\n}\r\n\r\nexport class BoardComponent extends React.Component<BoardComponentInputs, BoardComponentState> {\r\n\r\n    constructor(props:BoardComponentInputs) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            board: GameBuilder.buildBoard(this.props.board.height, this.props.board.width, this.props.board.mines),\r\n            minesLeft: this.props.board.mines,\r\n            flagsError: false\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps:BoardComponentInputs) {\r\n        if (prevProps.board !== this.props.board) {\r\n                this.setState({\r\n                    board: GameBuilder.buildBoard(this.props.board.height, this.props.board.width, this.props.board.mines),\r\n                    minesLeft: this.props.board.mines\r\n                })\r\n            }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                { this.state.flagsError &&\r\n                    <Alert severity=\"error\" onClose={() => {this.setState({flagsError:false})}}>No flegs left ...</Alert>\r\n                }\r\n                Flegs left - {this.state.minesLeft}\r\n                {this.renderBoard(this.state.board)}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderBoard(board:Cell[][]):ReactNode {\r\n        return board.map((row:Cell[]) => {\r\n            return (\r\n                <div className=\"row\" key={row[0].rowIndex}>\r\n                    {row.map((cell:Cell) => (\r\n                        <CellComponent key={`${cell.rowIndex},${cell.colIndex}`}\r\n                                       cell={cell} \r\n                                       cellClicked={() => this.onCellClicked(cell)} \r\n                                       markFlag={() => this.toggleFlag(cell)} \r\n                                       isSuperman={this.props.isSuperman}>\r\n                        </CellComponent>\r\n                    ))}\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    toggleFlag(cell:Cell) {\r\n        if (!this.state.board[cell.rowIndex][cell.colIndex].isRevealed) {\r\n            let isFlagError:boolean = false;\r\n\r\n            let newBoard:Cell[][] = this.state.board;\r\n            let minesLeft:number = this.state.minesLeft;\r\n\r\n            if (newBoard[cell.rowIndex][cell.colIndex].isFlagged) {\r\n                newBoard[cell.rowIndex][cell.colIndex].isFlagged = false;\r\n                minesLeft++;\r\n            } else if (this.state.minesLeft > 0) {\r\n                newBoard[cell.rowIndex][cell.colIndex].isFlagged = true;\r\n                minesLeft--;\r\n            } else {\r\n                isFlagError = true;\r\n            }\r\n\r\n            if (!isFlagError)  {\r\n                this.setState({\r\n                    board: newBoard,\r\n                    minesLeft,\r\n                    flagsError: false\r\n                });\r\n            } else {\r\n                this.setState(({\r\n                    flagsError: true\r\n                }))\r\n            }\r\n\r\n            if (this.getFlaggedMines(newBoard).length === this.props.board.mines) {\r\n                this.displayBoard();\r\n                alert(\"Congrats!! You win :)\");\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    onCellClicked(cell:Cell) {\r\n        if (!this.state.board[cell.rowIndex][cell.colIndex].isRevealed && !this.state.board[cell.rowIndex][cell.colIndex].isFlagged) {\r\n            if (this.state.board[cell.rowIndex][cell.colIndex].isMine) {\r\n                alert(\"Mine selected .. :( You lost\");\r\n                this.displayBoard();\r\n            } else {\r\n                let newBoard:Cell[][] = this.state.board;\r\n\r\n                if (this.state.board[cell.rowIndex][cell.colIndex].minesArroundCount === 0) {\r\n                    newBoard = this.revealveAllEmptyNeighbors(cell.rowIndex, cell.colIndex, newBoard);\r\n                } else {\r\n                    newBoard[cell.rowIndex][cell.colIndex].isRevealed = true;\r\n                }\r\n\r\n                this.setState({\r\n                    board: newBoard\r\n                }) \r\n            }\r\n        }\r\n    }\r\n\r\n    displayBoard():void {\r\n        let revealvedBoad:Cell[][] = this.state.board.map((row:Cell[]) => row.map((cell:Cell) => ({...cell, isRevealed: true})));\r\n        this.setState({board: revealvedBoad})\r\n    }\r\n\r\n    revealveAllEmptyNeighbors(row:number, col:number, newBoard:Cell[][]):Cell[][] {\r\n        let arr:Cell[] = [newBoard[row][col]];\r\n        let alreadyRevealved:{[id:string]:boolean} = {};\r\n\r\n        while (arr.length) {\r\n            let curr:Cell = arr.shift() || newBoard[row][col];\r\n            alreadyRevealved[`${curr.rowIndex}_${curr.colIndex}`] = true;\r\n            if (!curr.isRevealed && !curr.isFlagged && (!curr.isMine || curr.minesArroundCount === 0)) {\r\n                curr.isRevealed = true;\r\n                if (curr.minesArroundCount === 0) {\r\n                    let neighbors:Cell[] = GameBuilder.getNeighbors(curr.rowIndex, curr.colIndex, newBoard)\r\n                    .filter((neighbor:Cell) => !alreadyRevealved[`${neighbor.rowIndex}_${neighbor.colIndex}`]);\r\n                    arr.push(...neighbors);\r\n                }\r\n            }\r\n        }\r\n\r\n        return newBoard;\r\n    }\r\n\r\n    private getFlaggedMines(newBoard:Cell[][]):Cell[] {\r\n        let result:Cell[] = [];\r\n        newBoard.forEach((row:Cell[]) => \r\n            row.forEach((col:Cell) => (col.isFlagged && col.isMine) ? result.push(col) : ''));\r\n        return result;\r\n    }\r\n}","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Theme, createStyles, withStyles, Button } from '@material-ui/core';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { Board } from '../interfaces/board.interface';\r\n\r\n\r\ninterface GameMgmtProps {\r\n    board:Board;\r\n    isSuperman:boolean;\r\n    newGame: (height:number, width:number, mines:number) => void;\r\n    toggleSuperman: (newMode:boolean) => void;\r\n    classes:any;\r\n}\r\n\r\ninterface GameMgmtState {\r\n    height:number;\r\n    width:number;\r\n    mines:number;\r\n}\r\n\r\nclass GameMgmtComponent extends React.Component<GameMgmtProps, GameMgmtState> {\r\n    constructor(props:GameMgmtProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            height: this.props.board.height,\r\n            width: this.props.board.width,\r\n            mines: this.props.board.mines\r\n        }\r\n\r\n        this.handleChanges = this.handleChanges.bind(this);\r\n        this.submit = this.submit.bind(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"form-container\">\r\n                <div className=\"ctr\">\r\n                    <div className=\"row\">\r\n                        <TextField id=\"height\"\r\n                                   label=\"height\" \r\n                                   type=\"number\"\r\n                                   className={this.props.classes.formControl}\r\n                                   onChange={this.handleChanges}\r\n                                   value={this.state.height}>\r\n                        </TextField>\r\n                        <TextField id=\"width\"\r\n                                   label=\"width\" \r\n                                   type=\"number\"\r\n                                   className={this.props.classes.formControl}\r\n                                   onChange={this.handleChanges} \r\n                                   value={this.state.width}>\r\n                        </TextField>\r\n                        <TextField id=\"mines\"\r\n                                   label=\"mines\" \r\n                                   type=\"number\"\r\n                                   className={this.props.classes.formControl}\r\n                                   onChange={this.handleChanges} \r\n                                   value={this.state.mines}>\r\n                        </TextField>\r\n                    </div>\r\n                    <FormControlLabel control={ <Checkbox checked={this.props.isSuperman} \r\n                                                          onChange={() => this.props.toggleSuperman(!this.props.isSuperman)} \r\n                                                          name=\"isSuperman\" \r\n                                                          color=\"primary\"/>}\r\n                            label=\"Superman\"/>\r\n                    <Button variant=\"contained\" \r\n                            color=\"primary\" \r\n                            className={this.props.classes.btn} \r\n                            disabled={this.checkFormValidity()} \r\n                            onClick={this.submit}>\r\n                        New Game\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n\r\n    submit():void {\r\n        this.props.newGame(this.state.height, this.state.width, this.state.mines);\r\n    }\r\n\r\n    checkFormValidity():boolean {\r\n        return this.state.height > 300 || this.state.height < 1 ||\r\n               this.state.width > 300 || this.state.width < 1 ||\r\n               this.state.mines > this.state.height * this.state.width || this.state.mines < 1\r\n    }\r\n\r\n    handleChanges(event:any) {\r\n        const target = event.target;\r\n        const id = target.id;\r\n        let value = +target.value;\r\n\r\n        this.setState((state, props) => ({\r\n            ...state,\r\n            [id]: value\r\n        }))\r\n    }\r\n}\r\n\r\nconst styles = (theme:Theme) => createStyles({\r\n    formControl: {\r\n        margin: theme.spacing(2),\r\n        minWidth: 120\r\n      }, btn: {\r\n          width: '25%'\r\n      }\r\n})\r\n\r\nexport default withStyles(styles, {withTheme: true})(GameMgmtComponent)","import { createStore } from 'redux';\r\nimport { combineReducers } from 'redux';\r\nimport { Board } from '../interfaces/board.interface';\r\nimport { AppAction } from '../interfaces/app-action.interface';\r\n\r\nconst INIT_BOARD = 'INIT_BOARD';\r\nconst TOGGLE_SUPERMAN = 'TOGGLE_SUPERMAN';\r\n\r\nconst boardInitialState:Board = {\r\n    height: 8,\r\n    width: 8,\r\n    mines: 8\r\n}\r\n\r\nconst boardReducer = (state:Board = boardInitialState, action:AppAction):Board => {\r\n    switch(action.type) {\r\n        case INIT_BOARD:\r\n            return action.payload;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst supermanModeReducer = (state:boolean = false, action:AppAction):boolean => {\r\n    switch(action.type) {\r\n        case TOGGLE_SUPERMAN:\r\n            return action.payload;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst reducer = combineReducers({\r\n    board: boardReducer,\r\n    supermanMode: supermanModeReducer\r\n})\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport const initBoard = (board:Board):AppAction => {\r\n    return {\r\n        type: INIT_BOARD,\r\n        payload: board\r\n    }\r\n}\r\n\r\nexport const toggleSuperman = (newMode:boolean):AppAction => {\r\n    return {\r\n        type: TOGGLE_SUPERMAN,\r\n        payload: newMode\r\n    }\r\n}\r\n\r\nexport default store;","import React from 'react';\r\nimport { BoardComponent } from './board.component';\r\nimport GameMgmtComponent from './game-mgmt.component';\r\nimport { AppState } from '../interfaces/app-state.interface';\r\nimport { Dispatch } from 'redux';\r\nimport { Board } from '../interfaces/board.interface';\r\nimport { initBoard, toggleSuperman } from '../store/store';\r\nimport { connect } from 'react-redux';\r\n\r\ninterface GameComponentProps {\r\n    board: Board;\r\n    isSupermanMode:boolean;\r\n    initBoard: (board:Board) => void;\r\n    toggleSuperman: (newMode:boolean) => void;\r\n}\r\n\r\nclass GameComponent extends React.Component<GameComponentProps> {\r\n    constructor(props:GameComponentProps) {\r\n        super(props);\r\n\r\n        this.buildNewGame = this.buildNewGame.bind(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ctr\">\r\n                <GameMgmtComponent board={this.props.board} \r\n                                   isSuperman={this.props.isSupermanMode}\r\n                                   newGame={this.buildNewGame} \r\n                                   toggleSuperman={this.props.toggleSuperman}>\r\n                </GameMgmtComponent>\r\n                <BoardComponent board={this.props.board} \r\n                                isSuperman={this.props.isSupermanMode}>\r\n                </BoardComponent>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    buildNewGame(height:number, width:number, mines:number):void {\r\n        this.props.initBoard({\r\n            height,\r\n            width,\r\n            mines\r\n        })\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state:AppState) => ({\r\n    board: state.board,\r\n    isSupermanMode: state.supermanMode\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch:Dispatch) => ({\r\n    initBoard: (newBoard:Board) => dispatch(initBoard(newBoard)),\r\n    toggleSuperman: (newMode:boolean) => dispatch(toggleSuperman(newMode))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameComponent);","import React from 'react';\r\nimport './App.css';\r\nimport GameComponent from './components/game.component';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store/store';\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <GameComponent></GameComponent>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}