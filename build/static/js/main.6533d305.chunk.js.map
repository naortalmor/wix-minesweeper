{"version":3,"sources":["services/game-builder.service.ts","components/cell.component.tsx","components/board.component.tsx","components/game-mgmt.component.tsx","store/store.ts","components/game.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GameBuilder","height","width","mines","board","initBoard","insertMines","countMinesNeighbors","emptyBoard","i","push","j","rowIndex","colIndex","isMine","isFlagged","isRevealed","minesArroundCount","randomHeight","Math","floor","random","randomWidth","length","neighbors","getNeighbors","filter","neighbor","row","col","boardHeight","boardWidth","CellComponent","props","click","bind","cell","isSuperman","icon","faFlag","faBomb","className","this","onClick","generateCell","event","stopPropagation","shiftKey","markFlag","cellClicked","React","Component","BoardComponent","state","buildBoard","minesLeft","flagsError","win","prevProps","setState","Alert","severity","onClose","renderBoard","map","key","onCellClicked","toggleFlag","isFlagError","newBoard","getFlaggedMines","displayBoard","alert","revealveAllEmptyNeighbors","revealvedBoad","arr","alreadyRevealved","curr","shift","result","forEach","GameMgmtComponent","handleChanges","submit","TextField","id","label","type","classes","formControl","onChange","value","FormControlLabel","control","Checkbox","checked","toggleSuperman","name","color","Button","variant","btn","disabled","checkFormValidity","newGame","target","withStyles","theme","createStyles","margin","spacing","minWidth","withTheme","boardInitialState","reducer","combineReducers","action","payload","supermanMode","store","createStore","GameComponent","buildNewGame","isSupermanMode","connect","dispatch","newMode","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6533d305.chunk.js","sourcesContent":["import { Cell } from '../interfaces/cell.interface';\r\n\r\nexport class GameBuilder {\r\n    static buildBoard(height:number, width:number, mines:number):Cell[][] {\r\n        let board:Cell[][] = GameBuilder.initBoard(height, width);\r\n        GameBuilder.insertMines(board, height, width, mines);\r\n        GameBuilder.countMinesNeighbors(board);\r\n        return board;\r\n    }\r\n\r\n    private static initBoard(height:number, width:number):Cell[][] {\r\n        let emptyBoard:Cell[][] = [];\r\n\r\n        for (let i = 0; i < height; i++) {\r\n            emptyBoard.push([]);\r\n            for (let j = 0; j < width; j++) {\r\n                emptyBoard[i][j] = {\r\n                    rowIndex: i,\r\n                    colIndex: j,\r\n                    isMine: false,\r\n                    isFlagged: false,\r\n                    isRevealed: false,\r\n                    minesArroundCount: 0\r\n                }\r\n            }\r\n        }\r\n\r\n        return emptyBoard;\r\n    }\r\n\r\n    private static insertMines(emptyBoard:Cell[][], height:number, width:number, mines:number):void {\r\n        while(mines > 0) {\r\n            let randomHeight = Math.floor(Math.random() * height);\r\n            let randomWidth = Math.floor(Math.random() * width);\r\n            if(!emptyBoard[randomHeight][randomWidth].isMine) {\r\n                emptyBoard[randomHeight][randomWidth].isMine = true;\r\n                mines--;\r\n            }\r\n        }\r\n    }\r\n\r\n    private static countMinesNeighbors(board:Cell[][]):void {\r\n        for (let i = 0; i < board.length; i++) {\r\n            for (let j = 0; j < board[0].length; j++) {\r\n                const cell:Cell = board[i][j];\r\n                if (!cell.isMine) {\r\n                    const neighbors:Cell[] = GameBuilder.getNeighbors(i, j, board);\r\n                    board[i][j].minesArroundCount = neighbors.filter((neighbor:Cell) => neighbor.isMine).length;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    static getNeighbors(row:number, col:number, board:Cell[][]):Cell[] {\r\n        const boardHeight:number = board.length;\r\n        const boardWidth:number = board[0].length;\r\n        let neighbors:Cell[] = [];\r\n\r\n        if (row > 0) neighbors.push(board[row - 1][col]);\r\n        if (col < boardWidth - 1) neighbors.push(board[row][col + 1]);\r\n        if (row < boardHeight - 1) neighbors.push(board[row + 1][col]);\r\n        if (col > 0) neighbors.push(board[row][col - 1]);\r\n\r\n        if (row > 0 && col > 0) neighbors.push(board[row - 1][col - 1]);\r\n        if (row > 0 && col < boardWidth - 1) neighbors.push(board[row - 1][col + 1]);\r\n        if (row < boardHeight - 1 && col < boardWidth - 1) neighbors.push(board[row + 1][col + 1]);\r\n        if (row < boardHeight - 1 && col > 0) neighbors.push(board[row + 1][col - 1]);\r\n\r\n        return neighbors;\r\n    }\r\n}","import React from 'react';\r\nimport { Cell } from '../interfaces/cell.interface';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBomb, faFlag } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\ninterface CellComponentInputs {\r\n    cell:Cell;\r\n    isSuperman:boolean;\r\n    cellClicked: () => void;\r\n    markFlag: () => void;\r\n}\r\n\r\nexport class CellComponent extends React.Component<CellComponentInputs> {\r\n\r\n    constructor(props:CellComponentInputs) {\r\n        super(props);\r\n\r\n        this.click = this.click.bind(this);\r\n    }\r\n\r\n    generateCell(cell:Cell, isSuperman:boolean) {\r\n      if (isSuperman) {\r\n          if (cell.isFlagged) {\r\n            return (<FontAwesomeIcon icon={faFlag} />)\r\n          }\r\n      } else {\r\n          if (cell.isFlagged) {\r\n            return <FontAwesomeIcon icon={faFlag} />;\r\n          }\r\n          if (!cell.isRevealed) {\r\n            return null;\r\n          }\r\n      }\r\n      \r\n      if (cell.isMine) {\r\n        return (<FontAwesomeIcon icon={faBomb} />);\r\n      }\r\n      if (cell.minesArroundCount === 0) {\r\n        return null;\r\n      }\r\n      return cell.minesArroundCount;\r\n    }\r\n\r\n    render() {\r\n        let className = \"cell\" + (this.props.cell.isRevealed ? \"\" : \" not-revealved\");\r\n        return (\r\n            <div className={className} onClick={this.click}>\r\n                { this.generateCell(this.props.cell, this.props.isSuperman)}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    click(event:any) {\r\n      event.stopPropagation();\r\n      if (event.shiftKey) {\r\n           this.props.markFlag();\r\n      } else {\r\n        this.props.cellClicked()\r\n      }\r\n    }\r\n}","import React, { ReactNode } from 'react';\r\nimport { Cell } from '../interfaces/cell.interface';\r\nimport { GameBuilder } from '../services/game-builder.service';\r\nimport { CellComponent } from './cell.component';\r\nimport { Board } from '../interfaces/board.interface';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\ninterface BoardComponentInputs {\r\n    board:Board;\r\n    isSuperman:boolean;\r\n}\r\n\r\ninterface BoardComponentState {\r\n    board:Cell[][];\r\n    minesLeft:number;\r\n    flagsError:boolean;\r\n    win:boolean;\r\n}\r\n\r\nexport class BoardComponent extends React.Component<BoardComponentInputs, BoardComponentState> {\r\n\r\n    constructor(props:BoardComponentInputs) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            board: GameBuilder.buildBoard(this.props.board.height, this.props.board.width, this.props.board.mines),\r\n            minesLeft: this.props.board.mines,\r\n            flagsError: false,\r\n            win: false\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps:BoardComponentInputs) {\r\n        if (prevProps.board !== this.props.board) {\r\n                this.setState({\r\n                    board: GameBuilder.buildBoard(this.props.board.height, this.props.board.width, this.props.board.mines),\r\n                    minesLeft: this.props.board.mines\r\n                })\r\n            }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                { this.state.flagsError &&\r\n                    <Alert severity=\"error\" onClose={() => {this.setState({flagsError:false})}}>No flegs left ...</Alert>\r\n                }\r\n                Flegs left - {this.state.minesLeft}\r\n                {this.renderBoard(this.state.board)}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderBoard(board:Cell[][]):ReactNode {\r\n        return board.map((row:Cell[]) => {\r\n            return (\r\n                <div className=\"row\" key={row[0].rowIndex}>\r\n                    {row.map((cell:Cell) => (\r\n                        <CellComponent key={`${cell.rowIndex},${cell.colIndex}`}\r\n                                       cell={cell} \r\n                                       cellClicked={() => this.onCellClicked(cell)} \r\n                                       markFlag={() => this.toggleFlag(cell)} \r\n                                       isSuperman={this.props.isSuperman}>\r\n                        </CellComponent>\r\n                    ))}\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    toggleFlag(cell:Cell) {\r\n        if (!this.state.board[cell.rowIndex][cell.colIndex].isRevealed) {\r\n            let isFlagError:boolean = false;\r\n\r\n            let newBoard:Cell[][] = this.state.board;\r\n            let minesLeft:number = this.state.minesLeft;\r\n\r\n            if (newBoard[cell.rowIndex][cell.colIndex].isFlagged) {\r\n                newBoard[cell.rowIndex][cell.colIndex].isFlagged = false;\r\n                minesLeft++;\r\n            } else if (this.state.minesLeft > 0) {\r\n                newBoard[cell.rowIndex][cell.colIndex].isFlagged = true;\r\n                minesLeft--;\r\n            } else {\r\n                isFlagError = true;\r\n            }\r\n\r\n            if (!isFlagError)  {\r\n                this.setState({\r\n                    board: newBoard,\r\n                    minesLeft,\r\n                    flagsError: false\r\n                });\r\n            } else {\r\n                this.setState(({\r\n                    flagsError: true\r\n                }))\r\n            }\r\n\r\n            if (this.getFlaggedMines(newBoard).length === this.props.board.mines) {\r\n                this.displayBoard();\r\n                alert(\"Congrats!! You win :)\");\r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    onCellClicked(cell:Cell) {\r\n        if (!this.state.board[cell.rowIndex][cell.colIndex].isRevealed && !this.state.board[cell.rowIndex][cell.colIndex].isFlagged) {\r\n            if (this.state.board[cell.rowIndex][cell.colIndex].isMine) {\r\n                alert(\"Mine selected .. :( You lost\");\r\n                this.displayBoard();\r\n            } else {\r\n                let newBoard:Cell[][] = this.state.board;\r\n\r\n                if (this.state.board[cell.rowIndex][cell.colIndex].minesArroundCount === 0) {\r\n                    newBoard = this.revealveAllEmptyNeighbors(cell.rowIndex, cell.colIndex, newBoard);\r\n                } else {\r\n                    newBoard[cell.rowIndex][cell.colIndex].isRevealed = true;\r\n                }\r\n\r\n                this.setState({\r\n                    board: newBoard\r\n                }) \r\n            }\r\n        }\r\n    }\r\n\r\n    displayBoard():void {\r\n        let revealvedBoad:Cell[][] = this.state.board.map((row:Cell[]) => row.map((cell:Cell) => ({...cell, isRevealed: true})));\r\n        this.setState({board: revealvedBoad})\r\n    }\r\n\r\n    revealveAllEmptyNeighbors(row:number, col:number, newBoard:Cell[][]):Cell[][] {\r\n        let arr:Cell[] = [newBoard[row][col]];\r\n        let alreadyRevealved:{[id:string]:boolean} = {};\r\n\r\n        while (arr.length) {\r\n            let curr:Cell = arr.shift() || newBoard[row][col];\r\n            alreadyRevealved[`${curr.rowIndex}_${curr.colIndex}`] = true;\r\n            if (!curr.isRevealed && !curr.isFlagged && (!curr.isMine || curr.minesArroundCount === 0)) {\r\n                curr.isRevealed = true;\r\n                if (curr.minesArroundCount === 0) {\r\n                    let neighbors:Cell[] = GameBuilder.getNeighbors(curr.rowIndex, curr.colIndex, newBoard)\r\n                    .filter((neighbor:Cell) => !alreadyRevealved[`${neighbor.rowIndex}_${neighbor.colIndex}`]);\r\n                    arr.push(...neighbors);\r\n                }\r\n            }\r\n        }\r\n\r\n        return newBoard;\r\n    }\r\n\r\n    private getFlaggedMines(newBoard:Cell[][]):Cell[] {\r\n        let result:Cell[] = [];\r\n        newBoard.forEach((row:Cell[]) => \r\n            row.forEach((col:Cell) => (col.isFlagged && col.isMine) ? result.push(col) : ''));\r\n        return result;\r\n    }\r\n}","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Theme, createStyles, withStyles, Button } from '@material-ui/core';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { Board } from '../interfaces/board.interface';\r\n\r\n\r\ninterface GameMgmtProps {\r\n    board:Board;\r\n    isSuperman:boolean;\r\n    newGame: (height:number, width:number, mines:number) => void;\r\n    toggleSuperman: (newMode:boolean) => void;\r\n    classes:any;\r\n}\r\n\r\ninterface GameMgmtState {\r\n    height:number;\r\n    width:number;\r\n    mines:number;\r\n}\r\n\r\nclass GameMgmtComponent extends React.Component<GameMgmtProps, GameMgmtState> {\r\n    constructor(props:GameMgmtProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            height: this.props.board.height,\r\n            width: this.props.board.width,\r\n            mines: this.props.board.mines\r\n        }\r\n\r\n        this.handleChanges = this.handleChanges.bind(this);\r\n        this.submit = this.submit.bind(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"form-container\">\r\n                <div className=\"ctr\">\r\n                    <div className=\"row\">\r\n                        <TextField id=\"height\"\r\n                                   label=\"height\" \r\n                                   type=\"number\"\r\n                                   className={this.props.classes.formControl}\r\n                                   onChange={this.handleChanges}\r\n                                   value={this.state.height}>\r\n                        </TextField>\r\n                        <TextField id=\"width\"\r\n                                   label=\"width\" \r\n                                   type=\"number\"\r\n                                   className={this.props.classes.formControl}\r\n                                   onChange={this.handleChanges} \r\n                                   value={this.state.width}>\r\n                        </TextField>\r\n                        <TextField id=\"mines\"\r\n                                   label=\"mines\" \r\n                                   type=\"number\"\r\n                                   className={this.props.classes.formControl}\r\n                                   onChange={this.handleChanges} \r\n                                   value={this.state.mines}>\r\n                        </TextField>\r\n                    </div>\r\n                    <FormControlLabel control={ <Checkbox checked={this.props.isSuperman} \r\n                                                          onChange={() => this.props.toggleSuperman(!this.props.isSuperman)} \r\n                                                          name=\"isSuperman\" \r\n                                                          color=\"primary\"/>}\r\n                            label=\"Superman\"/>\r\n                    <Button variant=\"contained\" \r\n                            color=\"primary\" \r\n                            className={this.props.classes.btn} \r\n                            disabled={this.checkFormValidity()} \r\n                            onClick={this.submit}>\r\n                        New Game\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n\r\n    submit():void {\r\n        this.props.newGame(this.state.height, this.state.width, this.state.mines);\r\n    }\r\n\r\n    checkFormValidity():boolean {\r\n        return this.state.height > 300 || this.state.height < 1 ||\r\n               this.state.width > 300 || this.state.width < 1 ||\r\n               this.state.mines > this.state.height * this.state.width || this.state.mines < 1\r\n    }\r\n\r\n    handleChanges(event:any) {\r\n        const target = event.target;\r\n        const id = target.id;\r\n        let value = +target.value;\r\n\r\n        this.setState((state, props) => ({\r\n            ...state,\r\n            [id]: value\r\n        }))\r\n    }\r\n}\r\n\r\nconst styles = (theme:Theme) => createStyles({\r\n    formControl: {\r\n        margin: theme.spacing(2),\r\n        minWidth: 120\r\n      }, btn: {\r\n          width: '25%'\r\n      }\r\n})\r\n\r\nexport default withStyles(styles, {withTheme: true})(GameMgmtComponent)","import { createStore } from 'redux';\r\nimport { combineReducers } from 'redux';\r\nimport { Board } from '../interfaces/board.interface';\r\nimport { AppAction } from '../interfaces/app-action.interface';\r\n\r\nconst INIT_BOARD = 'INIT_BOARD';\r\nconst TOGGLE_SUPERMAN = 'TOGGLE_SUPERMAN';\r\n\r\nconst boardInitialState:Board = {\r\n    height: 8,\r\n    width: 8,\r\n    mines: 8\r\n}\r\n\r\nconst boardReducer = (state:Board = boardInitialState, action:AppAction):Board => {\r\n    switch(action.type) {\r\n        case INIT_BOARD:\r\n            return action.payload;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst supermanModeReducer = (state:boolean = false, action:AppAction):boolean => {\r\n    switch(action.type) {\r\n        case TOGGLE_SUPERMAN:\r\n            return action.payload;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst reducer = combineReducers({\r\n    board: boardReducer,\r\n    supermanMode: supermanModeReducer\r\n})\r\n\r\nconst store = createStore(reducer);\r\n\r\nexport const initBoard = (board:Board):AppAction => {\r\n    return {\r\n        type: INIT_BOARD,\r\n        payload: board\r\n    }\r\n}\r\n\r\nexport const toggleSuperman = (newMode:boolean):AppAction => {\r\n    return {\r\n        type: TOGGLE_SUPERMAN,\r\n        payload: newMode\r\n    }\r\n}\r\n\r\nexport default store;","import React from 'react';\r\nimport { BoardComponent } from './board.component';\r\nimport GameMgmtComponent from './game-mgmt.component';\r\nimport { AppState } from '../interfaces/app-state.interface';\r\nimport { Dispatch } from 'redux';\r\nimport { Board } from '../interfaces/board.interface';\r\nimport { initBoard, toggleSuperman } from '../store/store';\r\nimport { connect } from 'react-redux';\r\n\r\ninterface GameComponentProps {\r\n    board: Board;\r\n    isSupermanMode:boolean;\r\n    initBoard: (board:Board) => void;\r\n    toggleSuperman: (newMode:boolean) => void;\r\n}\r\n\r\nclass GameComponent extends React.Component<GameComponentProps> {\r\n    constructor(props:GameComponentProps) {\r\n        super(props);\r\n\r\n        this.buildNewGame = this.buildNewGame.bind(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ctr\">\r\n                <GameMgmtComponent board={this.props.board} \r\n                                   isSuperman={this.props.isSupermanMode}\r\n                                   newGame={this.buildNewGame} \r\n                                   toggleSuperman={this.props.toggleSuperman}>\r\n                </GameMgmtComponent>\r\n                <BoardComponent board={this.props.board} \r\n                                isSuperman={this.props.isSupermanMode}>\r\n                </BoardComponent>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    buildNewGame(height:number, width:number, mines:number):void {\r\n        this.props.initBoard({\r\n            height,\r\n            width,\r\n            mines\r\n        })\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state:AppState) => ({\r\n    board: state.board,\r\n    isSupermanMode: state.supermanMode\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch:Dispatch) => ({\r\n    initBoard: (newBoard:Board) => dispatch(initBoard(newBoard)),\r\n    toggleSuperman: (newMode:boolean) => dispatch(toggleSuperman(newMode))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameComponent);","import React from 'react';\nimport './App.css';\nimport GameComponent from './components/game.component';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <GameComponent></GameComponent>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}